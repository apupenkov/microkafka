{"uuid":"d28f8229-1b9d-4728-9ace-229e74a35c62","historyId":"4cbca9b03941ebda08b2a49988db791c","testCaseId":"[engine:junit-jupiter]/[class:micro.qa.microkafka.tests.kafka.CreatePaymentKafkaTest]/[method:messageShouldBeProducedToKafkaAfterSuccessfulRegistration()]","testCaseName":"KAFKA: Сообщение с пользователем публикуется в Kafka после успешной регистрации","fullName":"micro.qa.microkafka.tests.kafka.CreatePaymentKafkaTest.messageShouldBeProducedToKafkaAfterSuccessfulRegistration","labels":[{"name":"tag","value":"KAFKA"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:micro.qa.microkafka.tests.kafka.CreatePaymentKafkaTest]/[method:messageShouldBeProducedToKafkaAfterSuccessfulRegistration()]"},{"name":"AS_ID","value":"600001"},{"name":"host","value":"DESKTOP-JDLD120"},{"name":"thread","value":"22560@DESKTOP-JDLD120.main(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"micro.qa.microkafka.tests.kafka.CreatePaymentKafkaTest"},{"name":"testClass","value":"micro.qa.microkafka.tests.kafka.CreatePaymentKafkaTest"},{"name":"testMethod","value":"messageShouldBeProducedToKafkaAfterSuccessfulRegistration"},{"name":"suite","value":"micro.qa.microkafka.tests.kafka.CreatePaymentKafkaTest"}],"links":[],"name":"KAFKA: Сообщение с пользователем публикуется в Kafka после успешной регистрации","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"Cannot serialize because cannot determine how to serialize content-type text/plain;charset=UTF-8","trace":"java.lang.IllegalArgumentException: Cannot serialize because cannot determine how to serialize content-type text/plain;charset=UTF-8\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)\r\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)\r\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:57)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\r\n\tat io.restassured.internal.mapping.ObjectMapping.serialize(ObjectMapping.groovy:180)\r\n\tat io.restassured.internal.mapping.ObjectMapping$serialize.call(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)\r\n\tat io.restassured.internal.RequestSpecificationImpl.body(RequestSpecificationImpl.groovy:770)\r\n\tat micro.qa.microkafka.api.payment.PaymentApi.getPaymentForUserName(PaymentApi.java:24)\r\n\tat micro.qa.microkafka.tests.kafka.CreatePaymentKafkaTest.messageShouldBeProducedToKafkaAfterSuccessfulRegistration(CreatePaymentKafkaTest.java:26)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n"},"stage":"finished","description":"","steps":[],"attachments":[],"parameters":[],"start":1726691100564,"stop":1726691102258}